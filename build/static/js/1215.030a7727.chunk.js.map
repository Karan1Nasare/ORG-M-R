{"version":3,"file":"static/js/1215.030a7727.chunk.js","mappings":"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","sources":["components/auth/components/Login/loginForm.jsx","components/auth/components/Login/index.jsx","constants/api.jsx","utilities/axios-client.jsx"],"sourcesContent":["/* eslint-disable import/no-cycle */\nimport React, { useState } from 'react';\nimport { Button, TextField, Typography } from '@mui/material';\n\nimport { useForm } from 'react-hook-form';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { object, string } from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { Password } from '@mui/icons-material';\nimport { useNavigate } from 'react-router-dom';\nimport AuthButtonBg from '../../../../assets/auth/buttonBg.svg';\nimport { APIClient } from '../../../../utilities/axios-client';\nimport URLS from '../../../../constants/api';\nimport { useStore } from '../../../../store/context-store';\nimport { getRouteByName } from '../../../../App.routes';\n\nconst LoginForm = () => {\n  const { API } = APIClient();\n  const [Store, StoreDispatch] = useStore();\n  const [responseErr, setResponseErr] = useState('');\n  const navigate = useNavigate();\n  const loginSchema = object({\n    username: string()\n      .required('username should not be empty')\n      // .username()\n      .typeError('Please enter a valid username address'),\n    password: string().required('Password should not be empty'),\n  });\n  const {\n    handleSubmit,\n    formState: { errors, isSubmitting },\n    register,\n  } = useForm({ resolver: yupResolver(loginSchema) });\n\n  const onLoginHandler = async data => {\n    try {\n      const response = await API('POST', URLS.LOGIN, data, false);\n      console.log('response', response);\n      if (response.status !== 200) {\n        throw response;\n      }\n      StoreDispatch({ type: 'Login', user: response.data.data });\n      navigate(getRouteByName('dashboard')?.route || '/');\n      console.log(response);\n    } catch (err) {\n      setResponseErr(err?.response?.data?.message || err);\n      console.log('error: ', err);\n    }\n  };\n\n  return (\n    <div className='text-white w-[40%] lg:ml-64'>\n      <form onSubmit={handleSubmit(onLoginHandler)}>\n        <Typography variant='title' className='text-start block mb-10'>\n          Login to Continue\n        </Typography>\n        <div className='text-start mt-6 mb-6'>\n          <div className='lg:mb-6'>\n            <TextField\n              placeholder='UserName (Required)'\n              label=''\n              className='underline-border w-full'\n              variant='standard'\n              {...register('username')}\n            />\n          </div>\n          <div>\n            <TextField\n              name='password'\n              id='password'\n              placeholder='Password (Required)'\n              label=''\n              className='underline-border w-full'\n              variant='standard'\n              {...register('password')}\n            />\n          </div>\n        </div>\n        <p>{errors?.username?.message}</p>\n        <p>{errors?.password?.message}</p>\n        <div className='authButton mt-10'>\n          <img src={AuthButtonBg} alt='button' />\n          <Button variant='outline-primary' type='submit'>\n            Log In\n          </Button>\n        </div>\n        {responseErr && (\n          <Typography variant='h6' sx={{ mt: 10 }}>\n            {responseErr}\n          </Typography>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","/* eslint-disable import/no-cycle */\nimport React from 'react';\n\nimport '../layout.css';\n\nimport LoginForm from './loginForm';\nimport LoginBgImage from '../../../../assets/auth/Login.svg';\nimport Layout from '../layout';\n\nconst Login = () => {\n  return (\n    <div className='relative flex h-screen w-screen'>\n      <img\n        className='absolute inset-0 w-full h-full object-cover'\n        src={LoginBgImage}\n        alt='Background'\n      />\n\n      <div className='absolute inset-0 flex flex-col lg:flex-row p-4 lg:p-8 w-full'>\n        {/* Left Side Container  */}\n        <Layout />\n\n        {/* Right Side Container */}\n        <div className='flex justify-center  items-center w-full  mt-12 lg:mt-0'>\n          <LoginForm />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","const URLS = {\n  HOST_URL: 'https://superadmin.mandreducation.in',\n  SUFFIX_URL: '/api/v1',\n  LOGIN: `/login`,\n  LOG_OUT: `/logout`,\n  GET_PROFILE: '/profile',\n  UPDATE_PROFILE: '/profile/update',\n  CHANGE_PASSWORD: '/change-password',\n  FORGOT_PASSWORD: '/password/email',\n  RESET_PASSWORD: token => `/password/reset?token=${token}`,\n  DASHBOARD: () => `/dashboard`,\n  ADD_PLAN: () => `/plans`,\n  GET_PLAN: () => `/plans`,\n  EDIT_PLAN: id => `/plans/${id}`,\n  UPDATE_PLAN: id => `/plans/${id}`,\n  DELETE_PLAN: id => `/plans/${id}`,\n  ADD_ADMIN: () => `/admins`,\n  GET_ADMINS: () => `/admins`,\n  EDIT_ADMIN: id => `/admins/${id}`,\n  UPDATE_ADMIN: id => `/admins/${id}`,\n  DELETE_ADMIN: id => `/admins/${id}`,\n  ADD_FEATURE: () => `/features`,\n  GET_FEATURES: () => `/features`,\n  EDIT_FEATURE: id => `/features/${id}`,\n  UPDATE_FEATURE: id => `/features/${id}`,\n  DELETE_FEATURE: id => `/features/${id}`,\n  ADD_QUESTION_BANK: () => `/questionbanks`,\n  GET_QUESTION_BANK: () => `/questionbanks`,\n  EDIT_QUESTION_BANK: id => `/questionbanks/${id}`,\n  UPDATE_QUESTION_BANK: id => `/questionbanks/${id}`,\n  DELETE_QUESTION_BANK: id => `/questionbanks/${id}`,\n  ADD_COURSE: () => `/courses`,\n  GET_COURSE: () => `/courses`,\n  EDIT_COURSE: id => `/courses/${id}`,\n  UPDATE_COURSE: id => `/courses/${id}`,\n  DELETE_COURSE: id => `/courses/${id}`,\n  ADD_SUBJECT: () => `/subjects`,\n  GET_SUBJECT: () => `/subjects`,\n  EDIT_SUBJECT: id => `/subjects/${id}`,\n  UPDATE_SUBJECT: id => `/subjects/${id}`,\n  DELETE_SUBJECT: id => `/subjects/${id}`,\n  ADD_CHAPTER: () => `/chapters`,\n  GET_CHAPTER: () => `/chapters`,\n  EDIT_CHAPTER: id => `/chapters/${id}`,\n  UPDATE_CHAPTER: id => `/chapters/${id}`,\n  DELETE_CHAPTER: id => `/chapters/${id}`,\n  ADD_LANGUAGES: () => `/languages`,\n  GET_LANGUAGES: () => `/languages`,\n  EDIT_LANGUAGES: id => `/languages/${id}`,\n  UPDATE_LANGUAGES: id => `/languages/${id}`,\n  DELETE_LANGUAGES: id => `/languages/${id}`,\n  ADD_ACADEMIC_YEAR: () => `/academic-years`,\n  GET_ACADEMIC_YEAR: () => `/academic-years`,\n  EDIT_ACADEMIC_YEAR: id => `/academic-years/${id}`,\n  UPDATE_ACADEMIC_YEAR: id => `/academic-years/${id}`,\n  DELETE_ACADEMIC_YEAR: id => `/academic-years/${id}`,\n  GET_NOTIFICATIION: userType => `/notifications?user_type=${userType}`,\n  ADD_NOTIFICATION: () => `/notifications`,\n  EDIT_NOTIFICATION: id => `/notifications/${id}`,\n  DELETE_NOTIFICATION: id => `/notifications/${id}`,\n};\nexport default URLS;\n","/* eslint-disable no-case-declarations */\n/* eslint-disable func-names */\n/* eslint-disable no-underscore-dangle */\nimport React, { useMemo } from 'react';\nimport axios from 'axios';\n// import { PROD_HOST_URL, DEV_HOST_URL, TEST_HOST_URL } from '../constants/api';\nimport { useLocation } from 'react-router-dom';\nimport urls from '../constants/api';\nimport { useStore } from '../store/context-store';\n\nconst axiosInstance = axios.create({\n  baseURL: urls.HOST_URL + urls.SUFFIX_URL,\n});\n\nexport const APIClient2 = () => {\n  const [Store, StoreDispatch] = useStore();\n\n  axiosInstance.interceptors.request.use(\n    async config => {\n      if (!navigator.onLine) {\n        const error = new Error('No internet connection');\n        error.name = 'NetworkError';\n        return Promise.reject(error);\n      }\n      const token =\n        JSON.parse(window.localStorage.getItem('last_state'))?.user?.token ||\n        '';\n      const newConfig = { ...config };\n      if (token) {\n        newConfig.headers = {\n          ...newConfig.headers,\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json',\n          'Content-Type': 'multipart/form-data',\n        };\n      }\n      return newConfig;\n    },\n    error => {\n      if (error?.response?.status === 401) {\n        StoreDispatch({ type: 'RemoveState' });\n      }\n      return Promise.reject(error);\n    },\n  );\n  axiosInstance.interceptors.response.use(\n    response => response,\n    async error => {\n      const originalRequest = error.config;\n      // if ( [401, 403].includes(error.response.status) && !originalRequest._retry) {\n      //   originalRequest._retry = true;\n\n      //   try {\n      //     const refreshToken = getRefreshToken(usertype);\n      //     const response = await axios.post(\n      //       `${API_END_POINT}/auth/refresh-token`,\n      //       {\n      //         refresh_token: refreshToken,\n      //       },\n      //     );\n      //     const { tokens } = response.data;\n      //     setTokensInStorage(\n      //       usertype,\n      //       tokens.access_token,\n      //       tokens.refresh_token,\n      //     );\n      //     originalRequest.headers.Authorization = `Bearer ${tokens.access_token}`;\n      //     return axios(originalRequest);\n      //   } catch (error) {\n      //     sessionStorage.clear();\n      //     localStorage.clear();\n      //     window.location.href = '/login';\n      //   }\n      // }\n\n      return Promise.reject(error);\n    },\n  );\n  return { axiosInstance };\n};\nexport const APIClient = () => {\n  const [Store, StoreDispatch] = useStore();\n\n  // Function to get bearer token\n  const getToken = () => {\n    return Store?.user?.token || '';\n  };\n  const getrefreshToken = () => {\n    return Store?.user?.refreshToken || '';\n  };\n  const getNewAccessToken = async refreshToken => {\n    try {\n      const response = await axios.post(urls.REFRESH_TOKEN, { refreshToken });\n      return response.data.token;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  const API = async (\n    method,\n    url,\n    data = null,\n    withAuth = true,\n    responseType = {},\n    token = '',\n    setLoading = () => {},\n  ) => {\n    let config = {};\n    if (withAuth) {\n      config = {\n        headers: {\n          Authorization: `Bearer ${token || Store?.user?.token}`,\n        },\n        ...responseType,\n      };\n    }\n    switch (method) {\n      case 'GET':\n        setLoading(true);\n        const getResponse = axiosInstance\n          .get(url, config)\n          .then(response => {\n            setLoading(false);\n            return response;\n          })\n          .catch(err => {\n            setLoading(false);\n            return err;\n          });\n        return getResponse;\n      case 'POST':\n        setLoading(true);\n        const postResponse = axiosInstance\n          .post(url, data, config)\n          .then(response => {\n            setLoading(false);\n            return response;\n          })\n          .catch(err => {\n            setLoading(false);\n            return err;\n          });\n        return postResponse;\n      case 'PUT':\n        const putResponse = axiosInstance\n          .put(url, data, config)\n          .then(response => {\n            setLoading(false);\n            return response;\n          })\n          .catch(err => {\n            setLoading(false);\n            return err;\n          });\n        return putResponse;\n      case 'PATCH':\n        const patchResponse = axiosInstance\n          .patch(url, data, config)\n          .then(response => {\n            setLoading(false);\n            return response;\n          })\n          .catch(err => {\n            setLoading(false);\n            return err;\n          });\n        return patchResponse;\n      case 'DELETE':\n        const deleteResponse = axiosInstance\n          .delete(url, config)\n          .then(response => {\n            setLoading(false);\n            return response;\n          })\n          .catch(err => {\n            setLoading(false);\n            return err;\n          });\n        return deleteResponse;\n      default:\n        const defaultResponse = axiosInstance\n          .get(url, config)\n          .then(response => {\n            setLoading(false);\n            return response;\n          })\n          .catch(err => {\n            setLoading(false);\n            return err;\n          });\n        return defaultResponse;\n    }\n  };\n\n  return { API };\n};\nexport const useQueryParams = () => {\n  const { search } = useLocation();\n\n  return useMemo(() => new URLSearchParams(search), [search]);\n};\nexport default axiosInstance;\n"],"names":["LoginForm","_errors$username","_errors$password","API","APIClient","Store","StoreDispatch","useStore","responseErr","setResponseErr","useState","navigate","useNavigate","loginSchema","object","username","string","required","typeError","password","handleSubmit","formState","errors","isSubmitting","register","useForm","resolver","yupResolver","_jsx","className","children","_jsxs","onSubmit","async","_getRouteByName","response","URLS","LOGIN","data","console","log","status","type","user","getRouteByName","route","err","_err$response","_err$response$data","message","Typography","variant","TextField","placeholder","label","name","id","src","AuthButtonBg","alt","Button","sx","mt","Login","LoginBgImage","Layout","HOST_URL","SUFFIX_URL","LOG_OUT","GET_PROFILE","UPDATE_PROFILE","CHANGE_PASSWORD","FORGOT_PASSWORD","RESET_PASSWORD","token","concat","DASHBOARD","ADD_PLAN","GET_PLAN","EDIT_PLAN","UPDATE_PLAN","DELETE_PLAN","ADD_ADMIN","GET_ADMINS","EDIT_ADMIN","UPDATE_ADMIN","DELETE_ADMIN","ADD_FEATURE","GET_FEATURES","EDIT_FEATURE","UPDATE_FEATURE","DELETE_FEATURE","ADD_QUESTION_BANK","GET_QUESTION_BANK","EDIT_QUESTION_BANK","UPDATE_QUESTION_BANK","DELETE_QUESTION_BANK","ADD_COURSE","GET_COURSE","EDIT_COURSE","UPDATE_COURSE","DELETE_COURSE","ADD_SUBJECT","GET_SUBJECT","EDIT_SUBJECT","UPDATE_SUBJECT","DELETE_SUBJECT","ADD_CHAPTER","GET_CHAPTER","EDIT_CHAPTER","UPDATE_CHAPTER","DELETE_CHAPTER","ADD_LANGUAGES","GET_LANGUAGES","EDIT_LANGUAGES","UPDATE_LANGUAGES","DELETE_LANGUAGES","ADD_ACADEMIC_YEAR","GET_ACADEMIC_YEAR","EDIT_ACADEMIC_YEAR","UPDATE_ACADEMIC_YEAR","DELETE_ACADEMIC_YEAR","GET_NOTIFICATIION","userType","ADD_NOTIFICATION","EDIT_NOTIFICATION","DELETE_NOTIFICATION","axiosInstance","axios","create","baseURL","urls","APIClient2","interceptors","request","use","_JSON$parse","_JSON$parse$user","navigator","onLine","error","Error","Promise","reject","JSON","parse","window","localStorage","getItem","newConfig","config","headers","Authorization","Accept","_error$response","method","url","arguments","length","undefined","responseType","setLoading","_Store$user3","get","then","catch","post","put","patch","delete"],"sourceRoot":""}